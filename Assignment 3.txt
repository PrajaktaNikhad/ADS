1. Implement singly linked list in java

public class Linked{
		Node head;
		
		static class Node {
			int data;
			Node link;
			Node (int d) {
				data =d;
				link = null;
			}
		}
		
		public void display(){
			Node n = head;
			while(n != null)
			{
				System.out.print(n.data + " -----> ");
				n = n.link;
			}
		}
		
		public static void main (String [] args){
			Linked l1 = new Linked (); //node and head become instance of Linkedlist
			l1.head = new Node(11); //node created by ele 11 and head pointer towards 11 node
			Node second = new Node(22);
			Node third = new Node(33);
			Node fourth = new Node(44);
			
			l1.head.link = second;
			second.link = third;
			third.link = fourth;
			
			l1.display();
		}
}

Output: 11 -----> 22 -----> 33 -----> 44 ----->

2. Implement Doubly linked list in java

class DLLI{
	Node head;
	static class Node{
		int data;
		Node next,prev;
		Node(int d){
			data = d;
			next = null;
			prev = null;
		}
	}
	
	void insert(int new_data) {
		Node new_node = new Node(new_data);
		new_node.next = head;
		new_node.prev = null;
		if(head != null)
			head.prev = new_node;
		head = new_node;
	}
	
	void display(Node n){
		Node p = null;
		while(n != null){
			System.out.print(n.data+"---> ");
			p=n;
			n=n.next;
		}	
	}
	public static void main(String args[]){
		DLLI d1 = new DLLI();
		d1.insert(10);
		d1.insert(20);
		d1.insert(30);
		d1.insert(40);
		d1.display(d1.head);
		System.out.println();
		d1.insert(5);
		d1.display(d1.head);	
	}
}

Output: 40---> 30---> 20---> 10--->
5---> 40---> 30---> 20---> 10--->

3. How to reverse a linked list in java

class LinkedList {
    static Node head;
    static class Node {
        int data;
        Node next;

        Node(int d){
            data = d;
            next = null;
        }
    }

    Node reverse(Node node){
        Node prev = null;
        Node current = node;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
    }

    void printList(Node node){
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
    public static void main(String[] args){
        LinkedList list = new LinkedList();
        list.head = new Node(55);
        list.head.next = new Node(45);
        list.head.next.next = new Node(75);
        list.head.next.next.next = new Node(10);

        System.out.println("Given linked list");
        list.printList(head);
        head = list.reverse(head);
        System.out.println("");
        System.out.println("Reversed linked list ");
        list.printList(head);
    }
}

Output: Given linked list
55 45 75 10
Reversed linked list
10 75 45 55

4. How to merge two linked list in sorted order in java

import java.util.*;
class LLNode {
    int info;
    LLNode next;
    LLNode(int t)
    {
        info = t;
        next = null;
    }
}

class MergeLL{
    LLNode head;
    public void addToLast(LLNode node){
        if (head == null){
            head = node;
        }
        else{
            LLNode temp = head;
            while (temp.next != null)
                temp = temp.next;
            temp.next = node;
        }
    }

    void displayList(){
        LLNode temp = head;
        while (temp != null){
            System.out.print(temp.info + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String args[])
    {
        MergeLL llist1 = new MergeLL();
        MergeLL llist2 = new MergeLL();

        llist1.addToLast(new LLNode(1));
        llist1.addToLast(new LLNode(5));
        llist1.addToLast(new LLNode(8));
        llist1.addToLast(new LLNode(10));
		System.out.println("Linked list1:");
		llist1.displayList();
        llist2.addToLast(new LLNode(3));
        llist2.addToLast(new LLNode(6));
        llist2.addToLast(new LLNode(9));
        llist2.addToLast(new LLNode(12));
		System.out.println("Linked list2:");
		llist2.displayList();
        llist1.head = new List().sortedMerge(llist1.head, llist2.head);
        System.out.println("Merge List:");
		llist1.displayList();
    }
}

class List{
    LLNode sortedMerge(LLNode headA, LLNode headB){
        LLNode temporaryLLNode = new LLNode(0);
        LLNode tail = temporaryLLNode;
        while (true){
            if (headA == null){
                tail.next = headB;
                break;
            }
            if (headB == null){
                tail.next = headA;
                break;
            }
            if (headA.info <= headB.info){
                tail.next = headA;
                headA = headA.next;
            }
            else{
                tail.next = headB;
                headB = headB.next;
            }
            tail = tail.next;
        }
        return temporaryLLNode.next;
    }
}

Output:Linked list1:
1 5 8 10
Linked list2:
3 6 9 12
Merge List:
1 3 5 6 8 9 10 12

5.How to find middle element of linked list in java

class Node {
    int data;
    Node next;
      Node(int x) {
        data = x;
          next = null;
    }
}

public class findMidele {
    static void pushNode(Node[] head_ref, int data_val) {
        Node new_node = new Node(data_val);
        new_node.next = head_ref[0];
        head_ref[0] = new_node;
    }

    static int getLen(Node head){
        int len = 0;
        Node temp = head;
        while (temp != null) {
            len++;
            temp = temp.next;
        }
        return len;
    }

    static int getMiddle(Node head) {
        int len = getLen(head);
        Node temp = head;

        int midIdx = len / 2;
        while (midIdx > 0) {
            temp = temp.next;
            midIdx--;
        }
        return temp.data;
    }

    public static void main(String[] args){
        Node[] head = new Node[1];
        for (int i = 5; i > 0; i--) {
            pushNode(head, i);
        }
        System.out.println("Middle Value Of Linked List is: "+ getMiddle(head[0]));
    }
}

Output:Middle Value Of Linked List is: 3

6.How to detect a loop in linked list in java

import java.util.*;

class Detectloop {
    static class Node {
        int data;
        Node next;
        int flag;
        Node(int x)
        {
            data = x;
            next = null;
              flag = 0;
        }
    }

    static Node push(Node head_ref, int new_data){
        Node new_node = new Node(new_data);
        new_node.next = head_ref;
        head_ref = new_node;
        return head_ref;
    }

    static boolean detectLoop(Node h){
        while (h != null) {
            if (h.flag == 1)
                return true;
            h.flag = 1;
            h = h.next;
        }
        return false;
    }

    public static void main(String[] args){
        Node head = null;
        head = push(head, 20);
        head = push(head, 4);
        head = push(head, 15);
        head = push(head, 10);
        head.next.next.next.next = head;
        if (detectLoop(head))
            System.out.print("Loop Found");
        else
            System.out.print("No Loop");
    }
}

Output: Loop Found

7.Find start node of loop in linkedlist

import java.util.*;
class firstnodeofloop{
static class Node {
	int key;
	Node next;
}

static Node newNode(int key){
	Node temp = new Node();
	temp.key = key;
	temp.next = null;
	return temp;
}

static void printList(Node head){
	while (head != null) {
		System.out.print(head.key + " ");
		head = head.next;
	}
	System.out.println();
}

static Node detectLoop(Node head){
	Node temp = new Node();
	while (head != null) {
		if (head.next == null){
			return null;
		}
		if (head.next == temp){
			break;
		}
		Node nex = head.next;
		head.next = temp;
		head = nex;
	}
	return head;
}

public static void main(String[] args){
	Node head = newNode(50);
	head.next = newNode(20);
	head.next.next = newNode(15);
	head.next.next.next = newNode(4);
	head.next.next.next.next = newNode(10);

	head.next.next.next.next.next = head.next.next;
	Node res = detectLoop(head);
	if (res == null)
		System.out.print("Loop does not exist");
	else
		System.out.print("Loop starting node is " + res.key);
	}
}

Output: Loop starting node is 15

8.How to find nth element from end of linked list

import java.io.*;
class NnodefrmendLL {
    Node head; 
    class Node {
        int data;
        Node next;
        Node(int d){
            data = d;
            next = null;
        }
    }

    void print(int N){
        int len = 0;
        Node temp = head;
        while (temp != null) {
            temp = temp.next;
            len++;
        }

        if (len < N)
            return;
        temp = head;
        for (int i = 1; i < len - N + 1; i++)
            temp = temp.next;
        System.out.println(temp.data);
    }

    public void push(int new_data){
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }

    public static void main(String[] args) {
        NnodefrmendLL llist = new NnodefrmendLL();
        llist.push(20);
        llist.push(4);
        llist.push(15);
        llist.push(35);

        llist.print(4);
    }
}

Output: 35

9.How to check if linked list is palindrome in java

public class LLPalindrome {
    Node head;
    Node left;

    public class Node {
        public char data;
        public Node next;
        public Node(char d)
        {
            data = d;
            next = null;
        }
    }
	
    boolean isPalindromeUtil(Node right){
        left = head;
        if (right == null)
            return true;
        boolean isp = isPalindromeUtil(right.next);
        if (isp == false)
            return false;
        boolean isp1 = (right.data == left.data);
        left = left.next;
        return isp1;
    }

    boolean isPalindrome(Node head)
    {
        boolean result = isPalindromeUtil(head);
        return result;
    }
    public void push(char new_data){
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }

    void printList(Node ptr){
        while (ptr != null) {
            System.out.print(ptr.data + "->");
            ptr = ptr.next;
        }
        System.out.println("Null");
    }

    public static void main(String[] args){
        LLPalindrome llist = new LLPalindrome();
        char[] str = { 'a', 'b', 'a', 'c', 'a', 'b', 'a' };
        for (int i = 0; i < 7; i++) {
            llist.push(str[i]);
        }
        if (llist.isPalindrome(llist.head)) {
            System.out.println("Is Palindrome");
            System.out.println("");
        }
        else {
            System.out.println("Not Palindrome");
            System.out.println("");
        }
    }
}

Output:Is Palindrome

10.Add two numbers represented by linked list in java

class AddTwoLL {
    static Node head1, head2;
    static class Node {
        int data;
        Node next;
        Node(int d) {
            data = d;
            next = null;
        }
    }

    void addTwoLists(Node first, Node second) {
        Node start1 = new Node(0);
        start1.next = first;
        Node start2 = new Node(0);
        start2.next = second;

        addPrecedingZeros(start1, start2);
        Node result = new Node(0);
        if (sumTwoNodes(start1.next, start2.next, result) == 1) {
            Node node = new Node(1);
            node.next = result.next;
            result.next = node;
        }
        printList(result.next);
    }

    private int sumTwoNodes(Node first, Node second, Node result) {
        if (first == null) {
            return 0;
        }
        int number = first.data + second.data + sumTwoNodes(first.next, second.next, result);
        Node node = new Node(number % 10);
        node.next = result.next;
        result.next = node;
        return number / 10;
    }

    private void addPrecedingZeros(Node start1, Node start2) {
        Node next1 = start1.next;
        Node next2 = start2.next;
        while (next1 != null && next2 != null) {
            next1 = next1.next;
            next2 = next2.next;
        }
        if (next1 == null && next2 != null) {
            while (next2 != null) {
                Node node = new Node(0);
                node.next = start1.next;
                start1.next = node;
                next2 = next2.next;
            }
        } 
		else if (next2 == null && next1 != null) {
            while (next1 != null) {
                Node node = new Node(0);
                node.next = start2.next;
                start2.next = node;
                next1 = next1.next;
            }
        }
    }

    void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println("");
    }
	
    public static void main(String[] args) {
        AddTwoLL list = new AddTwoLL();
        list.head1 = new Node(7);
        list.head1.next = new Node(5);
        list.head1.next.next = new Node(9);
        list.head1.next.next.next = new Node(4);
        list.head1.next.next.next.next = new Node(6);
        System.out.print("First list is ");
        list.printList(head1);
        list.head2 = new Node(8);
        list.head2.next = new Node(4);
        System.out.print("Second list is ");
        list.printList(head2);

        System.out.print("Result list is ");
        list.addTwoLists(head1, head2);
    }
}

Output: First list is 7 5 9 4 6
Second list is 8 4
Result list is 7 6 0 3 0